// <auto-generated />
using System;
using Etiquetas.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Etiquetas.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190419151229_InitialMigration2")]
    partial class InitialMigration2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Etiquetas.Models.Formulaciones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("IngredienteId");

                    b.Property<string>("OwnerId");

                    b.Property<float>("Percentage");

                    b.Property<int?>("ProximalId");

                    b.HasKey("Id");

                    b.HasIndex("IngredienteId");

                    b.HasIndex("ProximalId");

                    b.ToTable("Formulaciones");
                });

            modelBuilder.Entity("Etiquetas.Models.Ingredientes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float?>("Agua");

                    b.Property<float?>("Azucar");

                    b.Property<float?>("Calcio");

                    b.Property<float?>("Calorias");

                    b.Property<float?>("Carbohidratos");

                    b.Property<float?>("Cenizas");

                    b.Property<bool>("Certificate");

                    b.Property<float?>("Cloruro");

                    b.Property<float?>("Cobre");

                    b.Property<float?>("Colesterol");

                    b.Property<float?>("Cromo");

                    b.Property<float?>("FibraDietetica");

                    b.Property<float?>("Fluor");

                    b.Property<float?>("Fosforo");

                    b.Property<float?>("Grasa");

                    b.Property<float?>("GrasaSaturada");

                    b.Property<float?>("GrasaTrans");

                    b.Property<string>("Grupo");

                    b.Property<float?>("Hierro");

                    b.Property<float?>("Magnesio");

                    b.Property<float?>("Manganeso");

                    b.Property<float?>("Molibdeno");

                    b.Property<string>("Name");

                    b.Property<string>("OwnerId");

                    b.Property<float?>("Potasio");

                    b.Property<float?>("Proteinas");

                    b.Property<string>("Provedor");

                    b.Property<float?>("Selenio");

                    b.Property<float?>("Sodio");

                    b.Property<float?>("Va");

                    b.Property<float?>("Vb1");

                    b.Property<float?>("Vb12");

                    b.Property<float?>("Vb2");

                    b.Property<float?>("Vb3");

                    b.Property<float?>("Vb5");

                    b.Property<float?>("Vb7");

                    b.Property<float?>("Vb9");

                    b.Property<float?>("Vc");

                    b.Property<float?>("Vd");

                    b.Property<float?>("Ve");

                    b.Property<float?>("Vk");

                    b.Property<float?>("Yodo");

                    b.Property<float?>("Zinc");

                    b.Property<string>("codFAO");

                    b.HasKey("Id");

                    b.ToTable("Ingredientes");
                });

            modelBuilder.Entity("Etiquetas.Models.Porciones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Annotation");

                    b.Property<float?>("Cantidad");

                    b.Property<string>("Category");

                    b.Property<float?>("Densidad");

                    b.Property<string>("Name");

                    b.Property<string>("OwnerId");

                    b.Property<string>("Unidad");

                    b.Property<bool>("isLey");

                    b.HasKey("Id");

                    b.ToTable("Porciones");
                });

            modelBuilder.Entity("Etiquetas.Models.Proximales", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float?>("Agua");

                    b.Property<float?>("Azucar");

                    b.Property<float?>("Calcio");

                    b.Property<float?>("Calorias");

                    b.Property<float?>("Carbohidratos");

                    b.Property<float?>("Cenizas");

                    b.Property<float?>("Cloruro");

                    b.Property<float?>("Cobre");

                    b.Property<float?>("Colesterol");

                    b.Property<float?>("Cromo");

                    b.Property<float?>("FibraDietetica");

                    b.Property<float?>("Fluor");

                    b.Property<float?>("Fosforo");

                    b.Property<float?>("Grasa");

                    b.Property<float?>("GrasaSaturada");

                    b.Property<float?>("GrasaTrans");

                    b.Property<float?>("Hierro");

                    b.Property<float?>("Magnesio");

                    b.Property<float?>("Manganeso");

                    b.Property<float?>("Molibdeno");

                    b.Property<string>("Name");

                    b.Property<string>("OwnerId");

                    b.Property<float>("PorcionCantidad");

                    b.Property<int>("PorcionId");

                    b.Property<string>("PorcionUnidad");

                    b.Property<float?>("Potasio");

                    b.Property<float?>("Proteinas");

                    b.Property<float?>("Selenio");

                    b.Property<float?>("Sodio");

                    b.Property<float?>("Va");

                    b.Property<float?>("Vb1");

                    b.Property<float?>("Vb12");

                    b.Property<float?>("Vb2");

                    b.Property<float?>("Vb3");

                    b.Property<float?>("Vb5");

                    b.Property<float?>("Vb7");

                    b.Property<float?>("Vb9");

                    b.Property<float?>("Vc");

                    b.Property<float?>("Vd");

                    b.Property<float?>("Ve");

                    b.Property<float?>("Vk");

                    b.Property<float?>("Yodo");

                    b.Property<float?>("Zinc");

                    b.HasKey("Id");

                    b.HasIndex("PorcionId");

                    b.ToTable("Proximales");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Etiquetas.Models.Formulaciones", b =>
                {
                    b.HasOne("Etiquetas.Models.Ingredientes", "Ingrediente")
                        .WithMany()
                        .HasForeignKey("IngredienteId");

                    b.HasOne("Etiquetas.Models.Proximales", "Proximal")
                        .WithMany()
                        .HasForeignKey("ProximalId");
                });

            modelBuilder.Entity("Etiquetas.Models.Proximales", b =>
                {
                    b.HasOne("Etiquetas.Models.Porciones", "Porcion")
                        .WithMany()
                        .HasForeignKey("PorcionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
